---
- hosts: localhost
  become: true
  vars_files:
    - /tmp/default.yml
  pre_tasks:
    - raw: apt-get install -y python-simplejson

  tasks:
    - name: Upgrade system
      apt: upgrade=dist update_cache=yes
     
     
      
    - name: Install Prerequisites
      apt: name={{ item }} update_cache=yes state=latest force_apt_get=yes
      loop: [ 'aptitude' ]


    - name: Install LEMP Packages
      apt: name={{ item }} update_cache=yes state=latest
      loop: [ 'nginx', 'mysql-server','python3-dev','mysql-client','python3-mysqldb', 'python3-pymysql', 'python-dev','libmysqlclient-dev','python-mysqldb','php-fpm', 'php-mysql','software-properties-common','ufw' ]

    - name: Add certbot repository.
      apt_repository:
        repo="ppa:certbot/certbot"
        update_cache=yes

    - name: Install CertBot
      apt:
        name: python3-certbot-nginx
        state: present


    - name: "Add repository for PHP 7.0."
      apt_repository: 
        repo="ppa:ondrej/php" 
        update_cache=yes

    - name: Php installation version_7.3 and 7.4 php-fpm
      apt: 
         name:
          - php7.3-fpm
          - php7.3-cli
          - php7.3-mysql
          - php7.3-gd
          - php7.3-imagick
          - php7.3-recode
          - php7.3-tidy
          - php7.3-xmlrpc
          - php7.4-fpm
          - php7.4
          - php
          - php-cli
          - php-fpm
          - php-json
          - php-common
          - php-mysql
          - php-zip
          - php-gd
          - php-mbstring
          - php-curl
          - php-xml
          - php-pear
          - php-bcmath
          
          

# MySQL Configuration
    - name: Sets the root password 
      mysql_user: 
        name: root 
        password: "{{ mysql_root_password }}"
        login_unix_socket: /var/run/mysqld/mysqld.sock

    - name: Removes all anonymous user accounts
      mysql_user:
        name: ''
        host_all: yes
        state: absent
        login_user: root
        login_password: "{{ mysql_root_password }}"

    - name: Removes the MySQL test database
      mysql_db: 
        name: test 
        state: absent
        login_user: root
        login_password: "{{ mysql_root_password }}"


    - name: Creates database for WordPress
      mysql_db:
        name: "{{ mysql_db }}"
        state: present
        login_user: root
        login_password: "{{ mysql_root_password }}"
      tags: [ mysql ]

    - name: Create MySQL user for WordPress
      mysql_user:
        name: "{{ mysql_user }}"
        password: "{{ mysql_password }}"
        priv: "{{ mysql_db }}.*:ALL"
        state: present
        login_user: root
        login_password: "{{ mysql_root_password }}"
      tags: [ mysql ]

# UFW Configuration
    - name: "UFW - Allow HTTP on port {{ http_port }}"
      ufw:
        rule: allow
        port: "{{ http_port }}"
        proto: tcp

# Sets Up PHP Info Page
    - name: Sets Up PHP Info Page
      template:
        src: "/tmp/files/info.php.j2"
        dest: "/var/www/html/info.php"


    - name: Creates directory
      file:
        path: "/var/www/{{ http_host }}"
        state: directory

          # tasks file for wp-install-config
    - name: Create directory to download WordPress
      command: mkdir -p /opt/source/wordpress

    - name: Download WordPress
      get_url: url=https://www.wordpress.org/latest.tar.gz dest=/opt/source/wordpress/wordpress.tar.gz validate_certs=no

    - name: Extract WordPress
      command: "tar xzf /opt/source/wordpress/wordpress.tar.gz -C /var/www/{{ http_host }} --strip-components 1"



    - name: Set ownership
      file:
        path: "/var/www/{{ http_host }}"
        state: directory
        recurse: yes
        owner: www-data
        group: www-data
      tags: [ wordpress ]

    - name: Set permissions for directories
      shell: "/usr/bin/find /var/www/{{ http_host }}/ -type d -exec chmod 750 {} \\;"
      tags: [ wordpress ]

    - name: Set permissions for files
      shell: "/usr/bin/find /var/www/{{ http_host }}/ -type f -exec chmod 640 {} \\;"
      tags: [ wordpress ]

    - name: Set up wp-config
      template:
        src: "/tmp/files/wp-config.php.j2"
        dest: "/var/www/{{ http_host }}/wp-config.php"
      tags: [ wordpress ]
        
    - name:  change_file_permissions_wp-config
      file:
        path: "/var/www/{{ http_host }}/wp-config.php"
        state: file
        owner: www-data
        group: www-data
        mode: "0644"


    - name: Install nginx
      apt: name=nginx state=latest

    - name: install letsencrypt
      apt: name=letsencrypt state=latest

    - name: create letsencrypt directory
      file: name=/var/www/letsencrypt state=directory


    - name: Remove default nginx config
      file: name=/etc/nginx/sites-enabled/default state=absent


    - name: Install system nginx config
      template:
        src: "/tmp/files/nginx.conf.j2"
        dest: "/etc/nginx/nginx.conf"

    - name: Install nginx site for letsencrypt requests
      template:
        src: "/tmp/files/nginx-http.j2"
        dest: "/etc/nginx/sites-enabled/{{ http_conf }}"
    
    - name: Reload nginx to activate letsencrypt site
      service: name=nginx state=restarted

    - name: Create letsencrypt certificate
      shell: letsencrypt certonly -n --webroot -w /var/www/letsencrypt -m {{ letsencrypt_email }} --agree-tos -d {{ domain_name }}
      args:
        creates: /etc/letsencrypt/live/{{ domain_name }}

    - name: Generate dhparams
      shell: openssl dhparam -out /etc/nginx/dhparams.pem 2048
      args:
        creates: /etc/nginx/dhparams.pem

    - name: Install nginx site for specified site
      template:
        src: "/tmp/files/nginx-le.j2"
        dest: "/etc/nginx/sites-enabled/{{ domain_name }}"

    - name: Reload nginx to activate specified site
      service: name=nginx state=restarted

    - name: Add letsencrypt cronjob for cert renewal
      cron:
        name: letsencrypt_renewal
        special_time: weekly
        job: letsencrypt --renew certonly -n --webroot -w /var/www/letsencrypt -m {{ letsencrypt_email }} --agree-tos -d {{ domain_name }} && service nginx reload

